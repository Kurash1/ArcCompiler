using System;
using System.IO;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Text.RegularExpressions;
using System.Windows.Forms;

namespace Eu4ArcCompiler
{
    class Program
    {
		[STAThread]
        static void Main(string[] args)
        {
            Arc2 arcs = new Arc2();
            arcs.Main(Environment.GetCommandLineArgs()[1]);
            Console.WriteLine("Press Any Key to exit");
            Console.ReadKey();
        }
    }
    public class Scope
    {
        public string Name { get; set; }

        public Scope(string name)
        {
            Name = name;
        }
    }
    public class Arc2
    {
        string[] eventFile = { "#Generated by Arc Eu4 script Compiler | Created by @Kurashi ", "" };
        string[] locFile = { "#Generated by Arc Eu4 script Compiler | Created by @Kurashi ", "1_english:" };
        string[] compileFile;
        string NameSpace = "";
        int EventNum = 0;
		int OptionNum = 0;
        List<Scope> CurrentScope = new List<Scope>();
        public void AddScope(string name)
        {
            //Array.Resize(ref CurrentScope, CurrentScope.Length + 1);
            //CurrentScope[CurrentScope.Length - 1] = new Scope(name);
			CurrentScope.Add(new Scope(name));
        }
		
		public void ExitScope(){
			//Array.Resize(ref CurrentScope, CurrentScope.Length - 1);
			CurrentScope.RemoveAt(CurrentScope.Count - 1);
		}
        public void Main(string path)
        {
            string[] arc = File.ReadAllLines(path);
            string atwe = "";
            for (int i = 0; i < arc.Length; i++)
            {
                arc[i] = arc[i].Trim();
                atwe += arc[i] + "\n";
            }

            compileFile = atwe.Split(null);

            Console.WriteLine("Compile File");
            for(int i = 0; i < compileFile.Length; i++)
            {
                Console.WriteLine(compileFile[i]);
            }

            for(int i = 0; i < compileFile.Length; i++)
            {
                switch (compileFile[i])
                {
                    case "namespace": //Namespace
                        Expect(i + 1, "=");
                        NameSpace = compileFile[i + 2];
						Default(i);
                        break;
                    case "arc_event": // Arc Scopes
						OptionNum = 0;
                        Expect(i + 1, "=");
                        Expect(i + 2, "{");
						Expect(i + 3, "type");
						Expect(i + 4, "=");
                        EventNum++;
                        WriteEvent(compileFile[i+5] + "_event = {");
                        WriteEvent("id = " + NameSpace + "." + EventNum);
                        WriteEvent("name = " + NameSpace + "." + EventNum + ".t");
                        WriteEvent("desc = " + NameSpace + "." + EventNum + ".d");
                        Expect(i + 6, "english");
                        Expect(i + 7, "=");
                        Expect(i + 8, "{");
                        Expect(i + 9, "name");
                        Expect(i + 10, "=");
                        WriteLoc(compileFile[i + 11]);
                        Expect(i + 12, "desc");
                        Expect(i + 13, "=");
						WriteLoc(compileFile[i + 14]);
						Expect(i + 15, "}");
                        i += 15;
                        break;
                    case "arc_option":
						OptionNum++;
						WriteEvent("option");
                        Expect(i + 1, "=");
                        WriteEvent("=");
						Expect(i + 2, "{");
						WriteEvent("{");
						WriteEvent("name = " + NameSpace + "." + EventNum + "." + ((char)(OptionNum+64)).ToString());
						Expect(i + 3, "english");
						Expect(i + 4, "=");
						Expect(i + 5, "{");
						Expect(i + 6, "name");
						Expect(i + 7, "=");
						WriteLoc(compileFile[i+8]);
						Expect(i + 9, "}");
						i += 9;
                        break;
					default:
						Default(i);
						break;
                }
            }
            Console.WriteLine(eventFile[0]);
            Console.WriteLine(eventFile[1]);
        }

		void Default(int i) {
			WriteEvent(compileFile[i]);
		}

        void WriteEvent(string s)
        {
            eventFile[1] += s + " ";
        }
        void WriteLoc(string s)
        {
            Array.Resize(ref locFile, locFile.Length + 1);
            locFile[locFile.Length - 1] = s;
        }

        void Expect(int Index, string ToExpect, string Error = "")
        {
            if (compileFile[Index] == ToExpect)
            {
                return;
            }
            else
            {
                if(Error == "")
                {
                    Console.WriteLine("Error: Expecting \"" + ToExpect +"\" Word: " + Index);
                }
                else
                {
                    Console.WriteLine(Error);
                }
                throw new ArgumentNullException();
            }
        }
    }
    public class ArcSpecials
    {
        string[] efile = { "#Generated by Arc Eu4 script Compiler | Created by Kurashi" };
        string[] eloc = { "#Generated by Arc Eu4 script Compiler | Created by Kurashi" };
        string[] esprite = { "#Generated by Arc Eu4 script Compiler | Created by Kurashi" };
        string[] emod = { "#Generated by Arc Eu4 script Compiler | Created by Kurashi" };
        int scope = 0;
        int opr = 0;
        ArcSpecials_Artifacts[] artifacts = { new ArcSpecials_Artifacts() };
        string tab(int i)
        {
            string a = "";
            for (int b = 0; b < i; b++)
            {
                a += "\t";
            }
            return a;
        }
        public void Main(string arck)
        {
            string[] arc = File.ReadAllLines(arck);

            for (int i = 0; i < arc.Length; i++)
            {
                arc[i] = arc[i].Trim();
            }

            for (int i = 0; i < arc.Length; i++)
            {
                //Create Class
                if (opr == 0 && Regex.IsMatch(arc[i], "\\A\\w*( = {)"))
                {
                    if (i > 0)
                    {
                        Array.Resize(ref artifacts, artifacts.Length + 1);
                        artifacts[artifacts.Length - 1] = new ArcSpecials_Artifacts();
                    }
                    artifacts[artifacts.Length - 1].id = arc[i].Substring(0, arc[i].Length - 4);
                    opr++;
                }

                //Define Name
                else if (opr == 1 && Regex.IsMatch(arc[i], "\\A(name = )\\w*"))
                {
                    artifacts[artifacts.Length - 1].name = arc[i].Substring(7);
                    opr++;
                }
                //Define Desc
                else if (opr == 2 && Regex.IsMatch(arc[i], "\\A(desc = )\\w*"))
                {
                    artifacts[artifacts.Length - 1].desc = arc[i].Substring(7);
                    opr++;
                }
                //Define Type
                else if (opr == 3 && Regex.IsMatch(arc[i], "\\A(type = )\\w*"))
                {
                    artifacts[artifacts.Length - 1].type = arc[i].Substring(7);
                    opr++;
                }

                //Begin Trigger scope
                else if (opr == 4 && Regex.IsMatch(arc[i], "\\A(trigger = {)"))
                {
                    opr++;
                }
                //Weld Triggers
                else if (opr == 5)
                {
                    if (arc[i] == "}")
                    {
                        opr++;
                    }
                    else
                    {
                        artifacts[artifacts.Length - 1].addtrigger(arc[i]);
                    }
                }

                //Begin Modifiers scope
                else if (opr == 6 && Regex.IsMatch(arc[i], "\\A(modifiers = {)"))
                {
                    opr++;
                }
                //Weld Modifiers
                else if (opr == 7)
                {
                    if (arc[i] == "}")
                    {
                        opr++;
                    }
                    else
                    {
                        artifacts[artifacts.Length - 1].addmodifier(arc[i]);
                    }
                }

                //Begin Effect Scope
                else if (opr == 8 && Regex.IsMatch(arc[i], "\\A(effects = {)"))
                {
                    opr++;
                }
                //Weld Effects
                else if (opr == 9)
                {
                    if (arc[i] == "}")
                    {
                        opr++;
                    }
                    else
                    {
                        artifacts[artifacts.Length - 1].addeffects(arc[i]);
                    }
                }

                //Final Exit Scope
                else if (opr == 10 && arc[i] == "}")
                {
                    opr = 0;
                }
            } //makes the artifacts into classes

            WriteEvent("province_event = {"); scope++;
            WriteEvent("id = es_archeology.1");
            WriteEvent("name = es_archeology.1.t");
            WriteEvent("test = es_archeology.1.d");
            WriteEvent("");
            WriteEvent("picture = TRADEGOODS_eventPicture");
            WriteEvent("");
            WriteEvent("option = {"); scope++;
            WriteEvent("name = es_archeology.1.a");
            WriteEvent("");
            WriteEvent("random_list = {"); scope++;

            for (int i = 0; i < artifacts.Length; i++)
            {
                WriteEvent("1 = { province_event = { id = es_archeology.2 days = 365 } add_province_flag = \"es_artifacts_" + artifacts[i].id + "\" }");
            } //random list of artifacts

            scope--; WriteEvent("}"); scope--;
            WriteEvent("}"); scope--;
            WriteEvent("}"); scope = 0;

            WriteEvent("province_event = {"); scope++;
            WriteEvent("id = es_archeology.2");
            WriteEvent("name = es_archeology.2.t");
            WriteEvent("desc = es_archeology.2.d");

            for (int i = 0; i < artifacts.Length; i++)
            {
                WriteEvent("picture = {"); scope++;
                WriteEvent("trigger = {"); scope++;
                for (int z = 0; z < artifacts[i].triggers.Length; z++)
                {
                    WriteEvent(artifacts[i].triggers[z]);
                }
                scope--; WriteEvent("}");
                WriteEvent("picture = es_artifacts_" + artifacts[i].id + "_eventPicture"); 
                scope--; WriteEvent("}");
            } //pictures

            WriteEvent("option = {"); scope++;
            WriteEvent("name = es_archeology.2.a");
            for (int i = 0; i < artifacts.Length; i++)
            {
                if(i == 0) { WriteEvent("if = {"); }
                else { WriteEvent("else_if = {"); }
                scope++;
                WriteEvent("limit = {"); scope++;
                for (int z = 0; z < artifacts[i].triggers.Length; z++)
                {
                    WriteEvent(artifacts[i].triggers[z]);
                } scope--;
                WriteEvent("}");
                WriteEvent("add_ruler_modifier = es_artifacts_" + artifacts[i].id);
                WriteEvent("clr_province_flag = \"es_artifacts_" + artifacts[i].id + "\""); scope--;
                WriteEvent("}"); scope--;
                WriteEvent("}"); scope--;
                WriteEvent("}");
            }

            for (int i = 0; i < artifacts.Length; i++)
            {
                WriteLoc("es_artifacts_" + artifacts[i].id + ": \"" + artifacts[i].name + "\"");
                WriteLoc("desc_es_artifacts_" + artifacts[i].id + ": \"" + artifacts[i].desc + "\"");
            }

            scope = 1;

            for (int i = 0; i < artifacts.Length; i++)
            {
                WriteSprite("spriteType = {"); scope++;
                WriteSprite("name = \"es_artifacts_" + artifacts[i].id + "_eventPicture\"");
                WriteSprite("textureFile = \"gfx//interface//es_artifacts//" + artifacts[i].id + "\""); scope--;
                WriteSprite("}");
            }

            for (int i = 0; i < artifacts.Length; i++)
            {
                Writemod("es_artifacts_" + artifacts[i].id + " = {"); scope++;
                for (int z = 0; z < artifacts[i].modifiers.Length; z++)
                {
                    Writemod(artifacts[i].modifiers[z]);
                } scope--;
                Writemod("}");
            }

            FinalizeMod("es_artifacts_modifiers.txt");
            FinalizeSprite("es_artifacts_sprite.txt");
            FinalizeLoc("es_artifacts_loc.txt");
            FinalizeEvent("es_artifacts_events.txt");
        }
        void FinalizeEvent(string path)
        {
            using (StreamWriter sw = File.CreateText(path))
            {
                for (int i = 0; i < efile.Length; i++)
                {
                    sw.WriteLine(efile[i]);
                }
            }
        }

        void FinalizeLoc(string path)
        {
            using (StreamWriter sw = File.CreateText(path))
            {
                for (int i = 0; i < eloc.Length; i++)
                {
                    sw.WriteLine(eloc[i]);
                }
            }
        }
        void FinalizeSprite(string path)
        {
            using (StreamWriter sw = File.CreateText(path))
            {
                for (int i = 0; i < esprite.Length; i++)
                {
                    sw.WriteLine(esprite[i]);
                }
            }
        }

        void FinalizeMod(string path)
        {
            using (StreamWriter sw = File.CreateText(path))
            {
                for (int i = 0; i < emod.Length; i++)
                {
                    sw.WriteLine(emod[i]);
                }
            }
        }
        void read()
        {
            for (int i = 0; i < efile.Length; i++)
            {
                Console.WriteLine(efile[i]);
            }

            //for (int i = 0; i < artifacts.Length; i++)
            //{
            //    Console.WriteLine(artifacts[i].id);
            //    Console.WriteLine(artifacts[i].name);
            //    Console.WriteLine(artifacts[i].desc);
            //    Console.WriteLine(artifacts[i].type);
            //    for (int z = 0; z < artifacts[i].triggers.Length; z++)
            //    {
            //        Console.WriteLine(artifacts[i].triggers[z]);
            //    }
            //    for (int z = 0; z < artifacts[i].modifiers.Length; z++)
            //    {
            //        Console.WriteLine(artifacts[i].modifiers[z]);
            //    }
            //    for (int z = 0; z < artifacts[i].effects.Length; z++)
            //    {
            //        Console.WriteLine(artifacts[i].effects[z]);
            //    }
            //}
        }

        void WriteEvent(string text)
        {
            Array.Resize(ref efile, efile.Length + 1);
            efile[efile.Length - 1] = tab(scope) + text;
        }
        void WriteLoc(string text)
        {
            Array.Resize(ref eloc, eloc.Length + 1);
            eloc[eloc.Length - 1] = " " + text;
        }

        void WriteSprite(string text)
        {
            Array.Resize(ref esprite, esprite.Length + 1);
            esprite[esprite.Length - 1] = tab(scope) + text;
        }

        void Writemod(string text)
        {
            Array.Resize(ref emod, emod.Length + 1);
            emod[emod.Length - 1] = tab(scope) + text;
        }
    }
    public class ArcSpecials_Artifacts
    {
        public string id;
        public string name;
        public string desc;
        public string type;
        public string[] triggers = { "" };
        public string[] modifiers = { "" };
        public string[] effects = { "" };

        public void addtrigger(string s)
        {
            if (triggers[triggers.Length - 1] != "")
            {
                Array.Resize(ref triggers, triggers.Length + 1);
            }
            triggers[triggers.Length - 1] = s;
        }
        public void addmodifier(string s)
        {
            if (modifiers[modifiers.Length - 1] != "")
            {
                Array.Resize(ref modifiers, modifiers.Length + 1);
            }
            modifiers[modifiers.Length - 1] = s;
        }

        public void addeffects(string s)
        {
            if (effects[effects.Length - 1] != "")
            {
                Array.Resize(ref effects, effects.Length + 1);
            }
            effects[effects.Length - 1] = s;
        }
    }
    public class ArcLanguage
    {
        string[] efile = { "#Generated by Arc Eu4 script Compiler | Created by Kurashi" };
        bool inscope = false;
        int scopetype = 0;
        int scope = 0;
        string name;
        int eventnum = 1;
        string tab(int i)
        {
            string a = "";
            for (int b = 0; b < i; b++)
            {
                a += "\t";
            }
            return a;
        }
        public void Main(string arck)
        {
            string[] arc = File.ReadAllLines(arck);

            for(int i = 0; i < arc.Length; i++)
            {
                arc[i] = arc[i].Trim();
            }

            for(int i = 0; i < arc.Length; i++)
            {
                if (inscope)
                {
                    switch (scopetype)
                    {
                        case 1: //If <triggers>
                            if (arc[i] == ") {")
                            {
                                scope--;
                                Write("}");
                                scopetype = 2;
                            }
                            else
                            {
                                Write(arc[i]);
                            }
                            break;
                        case 2: //If <effects>
                            if (arc[i] == "}")
                            {
                                scope--;
                                Write("}");
                                scopetype = 0;
                                inscope = false;
                            }
                            else
                            {
                                Write(arc[i]);
                            }
                            break;
                    }
                }
                else if (arc[i] == "if (")
                {
                    Write("if = {");
                    scope++;
                    Write("limit = {");
                    scope++;
                    scopetype = 1;
                    inscope = true;
                }
                else if (arc[i].StartsWith("namespace = "))
                {
                    name = arc[i].Substring(12, arc[i].Length - 12);
                    Write(arc[i]);
                }
                else if (arc[i] == "arc_country_event = {")
                {
                    Write("country_event = {");
                    scope++;
                    Write("id = " + name + "." + eventnum);
                    Write("name = " + name + "." + eventnum + ".t");
                    Write("test = " + name + "." + eventnum + ".d");
                    Write("");
                }
                else if (arc[i] == "arc_province_event = {")
                {
                    Write("province_event = {");
                    scope++;
                    Write("id = " + name + "." + eventnum);
                    Write("name = " + name + "." + eventnum + ".t");
                    Write("test = " + name + "." + eventnum + ".d");
                    Write("");
                }
                else
                {
                    if (arc[i].StartsWith("province_event")) { eventnum++; }
                    if (arc[i].StartsWith("country_event")) { eventnum++; }
                    scope -= arc[i].Count(f => (f == '}'));
                    Write(arc[i]);
                    scope += arc[i].Count(f => (f == '{'));
                }
            }

            read();
        }
        void read()
        {
            for(int i = 0; i < efile.Length; i++)
            {
                Console.WriteLine(efile[i]);
            }
        }

        void Write(string text)
        {
            Array.Resize(ref efile, efile.Length + 1);
            efile[efile.Length - 1] = tab(scope) + text;
        }
    }
}
